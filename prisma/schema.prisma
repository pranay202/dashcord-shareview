generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Hod {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  gender     String
  address    String?
  portfolio  String
  pictureUrl String
  bio        String?
  department String?
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  Student Student[]
}

model TgIncharge {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  pictureUrl String
  role       UserRole?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tg {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  phoneNo    String
  pictureUrl String?
  gender     String
  department String
  bio        String?
  role       UserRole?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  Student  Student[]
  Tasks    Tasks[]
  Meetings Meetings[]
}

model Teacher {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  phoneNo    String
  pictureUrl String
  role       UserRole?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tnp {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  passHash   String
  phoneNo    String
  pictureUrl String
  role       UserRole?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FamilyDetails {
  id                String   @id @default(cuid())
  email             String?
  passHash          String
  fathersName       String?
  mothersName       String?
  fathersPhoneNo    String?
  mothersPhoneNo    String?
  fathersOccupation String?
  mothersOccupation String?
  noOfSiblings      Int?
  brothersName      String?
  sistersName       String?
  brothersPhoneNo   String?
  sistersPhoneNo    String?
  familyIncome      Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Student Student?
}

model MedicalHistory {
  id          String   @id @default(cuid())
  rollNo      String   @unique
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Student Student @relation(fields: [rollNo], references: [rollNo])
}

model Student {
  rollNo                 String    @id
  name                   String
  pictureUrl             String?
  email                  String    @unique
  passHash               String
  phoneNo                String
  gender                 String?
  age                    Int?
  dateOfBirth            String?
  department             String?
  address                String?
  cast                   String?
  religion               String?
  seatType               String?
  admissionDate          String?
  achivement             String?   @db.VarChar(200)
  achivement_description String?   @db.LongText
  year                   Int?
  section                String?
  bloodGroup             String?
  height                 String?
  weight                 String?
  addharNumber           String?
  tenthCollege           String?
  tenthYOP               String?
  tenthScore             Float?
  twelthCollege          String?
  twelthYOP              String?
  twelthScore            Float?
  jeeScore               Float?
  cetScore               Float?
  sem1Score              Float?
  sem2Score              Float?
  sem3Score              Float?
  sem4Score              Float?
  sem5Score              Float?
  sem6Score              Float?
  sem7Score              Float?
  sem8Score              Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  role                   UserRole?
  familyDetailsId        String?   @unique
  tgId                   String?   @map("tg_id")
  hodId                  String?   @map("hod_id")
  friendsId              String?

  Hod            Hod?            @relation(fields: [hodId], references: [id])
  Tg             Tg?             @relation(fields: [tgId], references: [id])
  familyDetails  FamilyDetails?  @relation(fields: [familyDetailsId], references: [id])
  Friends        Friends?        @relation(fields: [friendsId], references: [id])
  Goals          Goals[]
  Tasks          Tasks[]
  Attendances    Attendances[]
  Assesments     Assesments[]
  MedicalHistory MedicalHistory?
  Meetings       Meetings[]
  Experience     Experience[]
  Events         Events[]
  Comments       Comments[]
}

model Friends {
  id            String    @id @default(cuid())
  collegeFriend Student[]
}

model Attendances {
  id       String          @id @default(cuid())
  rollNo   String
  lecture1 AttendanceType?
  lecture2 AttendanceType?
  lecture3 AttendanceType?
  lecture4 AttendanceType?
  lecture5 AttendanceType?
  lecture6 AttendanceType?
  date     String?
  total    Int?

  student Student @relation(fields: [rollNo], references: [rollNo])
}

model Assesments {
  id        String        @id @default(cuid())
  rollNo    String?
  name      AssesmentType
  subject1  Subjects?
  subject2  Subjects?
  subject3  Subjects?
  subject4  Subjects?
  subject5  Subjects?
  score1    Int
  score2    Int
  score3    Int
  score4    Int
  score5    Int
  updatedAt DateTime      @updatedAt

  Student Student? @relation(fields: [rollNo], references: [rollNo])
}

model Tasks {
  id           String   @id @default(cuid())
  title        String
  description  String
  deadlineDate String
  deadlineTime String
  createdBy    String?
  taskStatus   Status
  createdAt    DateTime @default(now())

  Student Student[]
  TG      Tg?       @relation(fields: [createdBy], references: [id])
}

model Goals {
  id          String   @id @default(cuid())
  title       String
  description String
  deadline    String
  type        GoalType
  rollNo      String?

  Student Student? @relation(fields: [rollNo], references: [rollNo])
}

model Meetings {
  id          String   @id @default(cuid())
  title       String
  description String
  createdBy   String
  studentId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  TG      Tg      @relation(fields: [createdBy], references: [id])
  Student Student @relation(fields: [studentId], references: [rollNo])
}

// Schema for ShareView [Note to Team Dashcord : Do not modify on without permission !!!]

model Experience {
  id       String @id @default(cuid())
  title    String
  body     String @db.LongText
  role     String
  company  String
  salary   String
  criteria String
  link     String
  by       String
  tags     String
  likes    Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Student  Student    @relation(fields: [by], references: [email])
  Comments Comments[]
}

model PlacementMaterial {
  id    String @id @default(cuid())
  title String
  links String
  body  String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id           String  @id @default(cuid())
  body         String  @db.LongText
  by           String
  experienceId String?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Student    Student     @relation(fields: [by], references: [email])
  Experience Experience? @relation(fields: [experienceId], references: [id])
}

// End of Shareview Schema

// Schema for Dashcord-Events [Note to Team Dashcord : Do not modify on without permission !!!]

model Events {
  id      String  @id @default(cuid())
  title   String
  regLink String
  date    String
  status  Status
  type    String
  body    String  @db.LongText
  winner  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Student Student? @relation(fields: [winner], references: [email])
}

// End of Events Schema

enum UserRole {
  HOD
  INCHARGE
  TG
  TEACHER
  PARENT
  STUDENT
  TNP
}

enum AttendanceType {
  PRESENT
  ABSENT
  INFORMED
}

enum Subjects {
  AI
  CN
  SEPM
  DP
  FE
}

enum AssesmentType {
  CAE1
  CAE2
  TAE1
  TAE2
  TAE3
  TAE4
}

enum Status {
  Upcoming
  InProgress
  Done
}

enum GoalType {
  LongTerm
  ShortTerm
}
